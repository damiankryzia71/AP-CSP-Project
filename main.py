'''
This program uses a GUI to let users check the speed of their typing. 
It displays the total time, accuracy and words per minute (WPM) of the user's typing. 
The program uses the modules imported below.
'''
import tkinter as tk
import time
import random
from PIL import Image, ImageTk

root = tk.Tk()

#global variables
startTime = 0
randomSentence = ''
timeElapsed = 0
highscore = 0

# This is the list of sentences, one of them is picked for the user to type in this program. It is picked randomly. The sentences were generated by https://randomwordgenerator.com/sentence.php
sentenceList = ['She used her own hair in the\nsoup to give it more flavor.',
'She couldn\'t decide if the glass was half\nempty or half full so she drank it.',
'When transplanting seedlings,\ncandied teapots will make the task easier.',
'The delicious aroma from the kitchen\nwas ruined by cigarette smoke.',
'The tour bus was packed with teenage girls\nheading toward their next adventure.',
'Three years later, the coffin\nwas still full of Jello.',
'I love bacon, beer, birds, and baboons.',
'I would be delighted if the\nsea were full of cucumber juice.',
'The river stole the gods.',
'Truth in advertising and dinosaurs with\nskateboards have much in common.',
'While on the first date he accidentally\nhit his head on the beam.',
'He was sure the Devil created\nred sparkly glitter.',
'It must be five o\'clock somewhere.',
'So long and thanks for the fish.',
'If you don\'t like toenails, you probably\nshouldn\'t look at your feet.',
'The bees decided to have a mutiny\nagainst their queen.',
'The toy brought back fond memories\nof being lost in the rain forest.',
'Two more days and all his\nproblems would be solved.',
'She can live her life however she wants as long\nas she listens to what I have to say.',
'The wake behind the boat told of the past while\nthe open sea for told life in the unknown future.',
'Potato wedges probably are\nnot best for relationships.',
'Iâ€™m working on a sweet potato farm.',
'Buried deep in the snow, he hoped his\nbatteries were fresh in his avalanche beacon.',
'The father died during childbirth.',
'My dentist tells me that chewing bricks\nis very bad for your teeth.',
'Pink horses galloped across the sea.',
'He figured a few sticks of dynamite were\neasier than a fishing pole to catch fish.',
'I like to leave work after\nmy eight-hour tea-break.',
'For the 216th time, he said he would\nquit drinking soda after this last Coke.',
'He enjoys practicing his\nballet in the bathroom.']

# this function picks a random sentence, starts the timer, resets the labels, and turns the button function to stop
def startTimer():
  global randomSentence
  global startTime
  randomSentence = random.choice(sentenceList)
  sentenceLabel.configure(text = randomSentence)
  startTime = time.time()
  startButton.configure(text = 'Stop', command = lambda : endTimer())
  timeLabel.configure(text = '     ')
  v.set('')
  accuracyLabel.configure(text = '     ')
  wpmLabel.configure(text = '     ')
  

# This function ends the timer and calculates the total time, then displays it on one of the labels, and resets the buton and the sentence label. The accuracy and wpm functions are used inside this one so they can all be assigned to the stop button.
def endTimer():
  global startTime
  global timeElapsed
  endTime = time.time()
  timeElapsed = round(endTime - startTime - 1, 2) # 1 extra second is subtracted to account for the time lost while clicking the entry at the start and pressing the stop button at the end
  timeLabel.configure(text = 'Time: ' + str(timeElapsed) + 's')
  startButton.configure(text = 'Start', command = lambda : startTimer())
  accuracyLabel.configure(text = 'Accuracy: ' + accuracyCalculator())
  wpmLabel.configure(text = 'WPM: ' + wpmCalculator())
  

#this function calculates and returns the accuracy of the sentence the user typed compared to the picked sentence
def accuracyCalculator():
  accuracyList = []
  entryList = []
  total = len(randomSentence)
  score = 0
  for i in randomSentence:
    accuracyList.append(i)
  for i in entry.get():
    entryList.append(i)
  for element in accuracyList:
    try:
      if element == entryList[accuracyList.index(element)]:
        score += 1
    except IndexError:
      pass
  accuracy = str(round(score / total * 100, 1)) + '%'
  return accuracy

#this function calculates and returns the words per minute(WPM) score of the user as a string
def wpmCalculator():
  global highscore
  global timeElapsed
  if entry.get() == '':
    words = 0
  else:
    words = 1
  for i in entry.get():
    if i == ' ':
      words += 1
  minutes = timeElapsed / 60
  if words == 0:
    wpm = 0
  elif words == 1:
    wpm = 1
  else:
    wpm = int(round(words / minutes,0))
  if wpm > highscore:
    highscore = wpm
    wpmHighscore1.configure(text = highscore)
  return str(wpm)


# This function restarts the WPM highscore
def restartHighscore():
  global highscore
  highscore = 0
  wpmHighscore1.configure(text = 'None')



#add the main canvas + image
canvas = tk.Canvas(root, width = 800, height = 600, bg = '#404040')
canvas.grid(columnspan = 20, rowspan = 20)
bgImagePath = Image.open('images/background.jpg') #image source: http://www.carseatinstallers.com/wp-content/uploads/2015/09/simple-grey-background-4.jpg
bgImage = ImageTk.PhotoImage(bgImagePath)
canvas.create_image(400, 300, image = bgImage)


#add title
titleImagePath = Image.open('images/title.png')
titleImage = ImageTk.PhotoImage(titleImagePath)
canvas.create_image(425, 200, image = titleImage)

#add instructions
instructionsImagePath = Image.open('images/sub.png')
instructionsImage = ImageTk.PhotoImage(instructionsImagePath)
canvas.create_image(425, 240, image = instructionsImage)

#add sentence label
sentenceLabel = tk.Label(root, text = '       ', bg = '#303030', borderwidth = 3, fg = '#a0a348', font = 'Times 15', relief = 'ridge') 
sentenceLabel.grid(column = 7, row = 10)

#add input text entry
v = tk.StringVar()
entry = tk.Entry(root, textvariable = v, bg = '#303030', borderwidth = 3, fg = '#a0a348', font = 'Times 15', relief = 'groove') 
entry.grid(column = 7, row = 12, rowspan = 1, columnspan = 1)

#add start/stop button
startButton = tk.Button(root, text = 'Start', command = lambda : startTimer(), bg = '#303030', fg = '#a0a348', font = 'Times 15 italic', highlightthickness = 3)  
startButton.grid(column = 7, row = 17, columnspan = 1, rowspan = 1)

#add time, WPM, and accuracy labels
timeLabel = tk.Label(root, text = 'Time:', bg = '#303030', fg = '#a0a348', font = 'Times 12', borderwidth = 3, relief = 'ridge')
wpmLabel = tk.Label(root, text = 'WPM:', bg = '#303030', fg = '#a0a348', font = 'Times 12', borderwidth = 3, relief = 'ridge')
accuracyLabel = tk.Label(root, text = 'Accuracy:', bg = '#303030', fg = '#a0a348', font = 'Times 12', borderwidth = 3, relief = 'ridge')
timeLabel.grid(column = 6, columnspan = 1, row = 15, rowspan = 1)
wpmLabel.grid(column = 7, columnspan = 1, row = 15, rowspan = 1)
accuracyLabel.grid(column = 8, columnspan = 1, row = 15, rowspan = 1)


# Create WPM highscore label/image
wpmImagePath = Image.open('images/wpm.png')
wpmImage = ImageTk.PhotoImage(wpmImagePath)
canvas.create_image(90, 80, image = wpmImage)
wpmHighscore1 = tk.Label(root, text = 'None', bg = '#404040', fg = '#a0a348', font = 'Times 12', borderwidth = 3, relief = 'ridge')
wpmHighscore1.grid(column = 1, row = 2, columnspan = 1, rowspan = 1)

#Create WPM highscore restart button
wpmRestartButton = tk.Button(root, text = 'Restart', command = lambda : restartHighscore(), bg = '#303030', fg = '#a0a348', font = 'Times 13 italic', highlightthickness = 3, relief = 'raised', highlightcolor = '#a0a348')
wpmRestartButton.grid(column = 1, row = 3, columnspan = 1, rowspan = 1)

# set window icon and name
root.iconbitmap('images/icon.ico') #image source: https://www.clipart.email/clipart/gaming-keyboard-clipart-303069.html converted to .ico by: https://convertio.co/jpeg-ico/
root.title('Typing Speed Test')

#mainloop
root.mainloop()


